// <auto-generated />
using System;
using CarMaintenance.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarMaintenance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarMaintenance.Models.Cars", b =>
                {
                    b.Property<int>("CarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarID"));

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarStatus")
                        .HasColumnType("int");

                    b.HasKey("CarID");

                    b.ToTable("Tbl_Cars");
                });

            modelBuilder.Entity("CarMaintenance.Models.Customers", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("CNIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.HasIndex("CarID");

                    b.ToTable("Tbl_Customers");
                });

            modelBuilder.Entity("CarMaintenance.Models.Receipts", b =>
                {
                    b.Property<int>("ReceiptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptID"));

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ReceiptID");

                    b.HasIndex("CarID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Tbl_Receipts");
                });

            modelBuilder.Entity("CarMaintenance.Models.ReceiptsDetails", b =>
                {
                    b.Property<int>("ReceiptsDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptsDetailsID"));

                    b.Property<int>("ReceiptID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.HasKey("ReceiptsDetailsID");

                    b.HasIndex("ReceiptID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Tbl_ReceiptDetails");
                });

            modelBuilder.Entity("CarMaintenance.Models.Services", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceStatus")
                        .HasColumnType("int");

                    b.HasKey("ServiceID");

                    b.ToTable("Tbl_Services");
                });

            modelBuilder.Entity("CarMaintenance.Models.TransferCars", b =>
                {
                    b.Property<int>("TransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferID"));

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int?>("CarsCarID")
                        .HasColumnType("int");

                    b.Property<int>("FromCustomerID")
                        .HasColumnType("int");

                    b.Property<int>("ToCustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransferID");

                    b.HasIndex("CarID");

                    b.HasIndex("CarsCarID");

                    b.HasIndex("FromCustomerID");

                    b.HasIndex("ToCustomerID");

                    b.ToTable("Tbl_TransferCars");
                });

            modelBuilder.Entity("CarMaintenance.Models.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("Tbl_Users");
                });

            modelBuilder.Entity("CarMaintenance.Models.Customers", b =>
                {
                    b.HasOne("CarMaintenance.Models.Cars", "Cars")
                        .WithMany("Customers")
                        .HasForeignKey("CarID");

                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarMaintenance.Models.Receipts", b =>
                {
                    b.HasOne("CarMaintenance.Models.Cars", "Cars")
                        .WithMany("Receipts")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarMaintenance.Models.Customers", "Customers")
                        .WithMany("Receipts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cars");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("CarMaintenance.Models.ReceiptsDetails", b =>
                {
                    b.HasOne("CarMaintenance.Models.Receipts", "Receipts")
                        .WithMany("ReceiptsDetails")
                        .HasForeignKey("ReceiptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarMaintenance.Models.Services", "Services")
                        .WithMany("ReceiptsDetails")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receipts");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("CarMaintenance.Models.TransferCars", b =>
                {
                    b.HasOne("CarMaintenance.Models.Cars", "Cars")
                        .WithMany()
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarMaintenance.Models.Cars", null)
                        .WithMany("TransferCars")
                        .HasForeignKey("CarsCarID");

                    b.HasOne("CarMaintenance.Models.Customers", "FromCustomers")
                        .WithMany()
                        .HasForeignKey("FromCustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarMaintenance.Models.Customers", "ToCustomers")
                        .WithMany()
                        .HasForeignKey("ToCustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cars");

                    b.Navigation("FromCustomers");

                    b.Navigation("ToCustomers");
                });

            modelBuilder.Entity("CarMaintenance.Models.Cars", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Receipts");

                    b.Navigation("TransferCars");
                });

            modelBuilder.Entity("CarMaintenance.Models.Customers", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("CarMaintenance.Models.Receipts", b =>
                {
                    b.Navigation("ReceiptsDetails");
                });

            modelBuilder.Entity("CarMaintenance.Models.Services", b =>
                {
                    b.Navigation("ReceiptsDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
